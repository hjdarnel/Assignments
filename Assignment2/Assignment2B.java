// Name: Henry Darnell
// ID: 010646670


public class Assignment2B{

    static boolean[][] dp;
    static String s;

    public static void main(String[] args) {
        Assignment2B tester = new Assignment2B();

        long startTime = System.currentTimeMillis();
        int i = tester.numPalindrome("dad");
        System.out.println(i);
        long endTime = System.currentTimeMillis();
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");

        startTime = System.currentTimeMillis();
        i = tester.numPalindrome("xabcba");
        System.out.println(i);
        endTime = System.currentTimeMillis();
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");

        startTime = System.currentTimeMillis();
        i = tester.numPalindrome("bbb");
        System.out.println(i);
        endTime = System.currentTimeMillis();
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");

        startTime = System.currentTimeMillis();
        i = tester.numPalindrome("cztcrgzznrwtfgfaweadcrzsyxhixuihzrpubcsbhebccrajuwsxfrnnaxekaidfghpjaubnzkzdtpkdhrxaenijzkfxnuhtkgyknmtyiysjnmbybwmpdywztmzfwafrtjsndmprcsuupebnfihnismegdyzhkpsrumpwsncyjpagxyngjrnyrtsnpmpbjztegaznpmbraxkyaakgbwduuatxtcnunikmfhpxipubumfiydtahstygsfwdxgsmgmsstnrffuzpmggicnbazmtarnmpwrgrjgxafxtszajwcrbpegjjwzwjeexdicgxmuyijgjmduetdbttupzpehctbfdkewxfiskucfidrgzzhhukumtdxykupstdntczhywzdnbfdrinejhxfwzegtbgtukcjjskskafirhjrpnyneiypmuxmpfhktmpfxnemjmzrrnduuajtgngheniuggbpipksnjjsmnifhmjkgnkmfmgchantaussdshtxyeabdfzrtkimwdpasdfedgbzhswihdynzpieeafzzxeyfrxenbbxgxbmjhhhmmwecrchwdfgmkfackxabanczhbidzumhzxapitftzkrxhtebgjritamnabbpnwujkhsurnbrxswimwrnkrbhxrscgbautkwdsctkjrpywrjeyibyrfgkwgmfibstiarhjtsfwczjicfzmgmxgxjfzdtcdnzbawrwpeaaykwxpusiaugmrudmjepebymammnutrebhpwksnutuktjpnpxchjrumurrwajmfatgrinppgufnbrhfhbmspyiykrahdkhtnjxjzybpxskrhuppcpasjidnfdzmprffyejwweufczdwaswkcmatkznrifjujeatuxdzrtdifrcbfiwmutmymxjntrcuuxdwbjbymkzzkkscfnszeciyfnugdytsntjawfdkyirehhhxpnpwbgjxjdbmmyfabkbhpjmkmfrkwtgdtngbefyaxsfypnexnnwwbxdbhkadyfakfjsetwtaxzzpnbffjbjwzxjmsisgggwsduhtphkdihthcmwnazrmhzkckwkkzcnyjrxkywnbuxfkjwnfjjmxcizjzaudtifsjmbephsyhnkyszjkykriyfztksijwjhnbsfgafpycecwjtfddjizkpfacrphbicghfezndixnswahmyyafxgxyjsihsanjpesehiiyjpegthdaihmejtryydmdnfsbpakjmdiumjzxrastugcgryuzjfrrssnukbfrxxwztufeuneftgapndddeggfrifmszfbpdkdsttjxmsmskzctzkjeubffjpkgnshkgmtbjkkaixxkyhbuudrtjtbtntxijkzndruxwziaytcrbdjzbbzacduuxtycndhryfkgjpcbpubjfskrxypfjwcywswttutmkmyikbxfubpdifnudpdshhicztcnzcegnuycauajsxxixygebgndedeaysskkzrrrydbjukrfeyrsgimdhgianfzrxjtfxizmnjdbkpbwktrhggztdggsbcshbmfrjbgewppymapsurgepiiusckgnzdwtfurneempckkaiwjybacdamjwudnaanzbrdigyrchemkphrwwjbssaermcasppwwfgcbxeyirgskxggjbzwiczarymjmdjkhzifpmnzczmyuzresuhrxifypeybszddrcskxpegpmksfutyhmtfripcwbchpdgherxrigncydgsdeybgitjpimxijenzbiszmtwizfbgaagumnigiybwhczjkaudmjzminncpicuazcrrpsbciuryutmyyinsuyxasuyjkffmpncficeeegmitusztjirddnrfucfnefpnhhxiacnnfmwuhetnnmmzfjpuyawbnkhsuigbfnfdnkzdhcfxywucddsdgkusxdyunufthgusutpwdzijrsrxjaarxwpbiwccpzstpduihnakxmizxtriksxuffhkpcrjatzznkpzedzjkcnguuyyrdpwebdmiymecuincaaajkjtghjainrajmizemttcuuysehhwpppxnknmkammszpkiytspxwmhaaryjmjasgbibrgamtjefkrpgphjwitzyiwpykzhewxsrzcwmabbtbxuenaaauzzdwnrthngtmudpniwawczmphhwbkmixhieiwikcpizsyibsgyjwwydjcegshwzuisauhesaizfbchbujscjjcdtxuzimgniucdptrwakzcrfwwaffbribhrfewhphyunktaunefmmmytbhuysgzdiheycahbcpztcijigxgrjkpyifkxztaddpijbsfprjzgemutucefsugthzggfpgtekrgysbsfugnamrgbhnmhhefjziytwbwebjyzgytsnbekwawbwtfcwenyhannwzekhwdyissrszmzcayzapidaiuiydpbknhrhxygkdawjjuwwttwbiuimcahnyrkacfcjbfphzkjxjttxfgypbgazdkpxiuhheetrctjjnditzjczdrptxhdarakdkszjfywakmgirzyedfnwbgpadebxyxnnkwzffsemcgnnmcmxmhkicykdpfebsnrrnzieemaahwfktijnyaffjjtxftjttgfnkziitbjnjdpnxbftawuxaitssuzdfskgxrmmwhefminitjjkrmkypmeuxxrpyebaynpdkjyatdwhrzwxcihpxmifnnueefymfjdfygknnjstabigfpukjeyhtjfdmjzckdradriagctsnnxsedirjukdfjndetwwfzeffnumszzsursyiikawnywwtxgjfnwbirxfjutbkfxntmeufrrirduwjykkcdcndbxjmhggwrjfkhingzdaduhgaeygajjferpeciedtimtagrakhecmhbeynedzgwcgnmtwnzaxxcfgpwbhhfhecwyksazsixmbcyazeujsymkjnynegccfaibdpujxwwansnbxyteufetiturwyxuxnxwbyswfmpgxjexzprmcfkwnznrwewhkxsbzpzpzgfcwapjinyfmczesnndapmwirdfhzdzharrmuafdinuuuhbujrjwnshtyxjwmwuujnksxxijirmntykfmchftsypksjiztthnwzfgruzuccmjdnyzikuerthgikzziangcjphuzjfdificntpuhiczchzwhjetrtpjayduenyudsebayeipbuwdwsdwyywzhippkaaxstcjchzctetwdgscaadbfecheiratjppzksnuiwscyzehycdnyspchxiwwgfmisnxpnbxbdrniiaewmbdhrsacgzatcpbudwgmkajmfcetsdraajjhjrcfsdbgwcbcpacdphipwtwdxezrmkgzhmrkpsgmtynruhjyzrmgbzdigrmztncajrndfiupwazucrafrywybjekkkehihmxbftexkwzmkrhzwnjatnxadwurbknnnfyduypabjbnhbzxfcazkmfrbgujsgaynmserrmbgfkeiayjykmssjceebxgxnrjcekseztxidusaxjffknecjnuetnnnhmskrxhmzpeeypfzpwjfkihcgsnuafxcpxwnsabhypgyietntijnrcjegttaumcfaheasdjptfwdwnhnrddkjxgdptwwmdbtcnbwbdwrpkkydcbpaiigwahmbgsntjkxcixrbxpeysnpagsfdrtuybpjwkmigdpuwyeunsdtxcjjhsyimfrwesrifbcufcnuwswwjdjmwtpsrkzpnscuywjstdjdpgtenicrxdrmnwjcizcwigkcncwiurahdihgykhsftusemykkrdrkymghyrdsiwbtbtcwdcazrxpekmiyighasgihyxybgzwctgsigaywmrtysnnzdcdxewpgwhxmrucnsssjgcjgscbgunfhsfpjgkxrswnfbsjdatidsxykyscwwawhywbngmzfmsiazynhbutktzezmapatdzrcsxnjcasrubtdjmtfsgkybecchebddpjajjtcniryunsxtdtpjwjxckkkukspjsnpbggidtkaazdnmuwwsstygcsradwidxwuxhwsyfktkyrsiadxznzujjjwsewwcjxtrhembantprbxuihcecnrcmndrbtcswtcubuhwbmydasciegxpharhxsungijabcffzcggumasankxhyzshcpyhexjebxpthuitfuzmnthbtupawdfzjkczujpbgmsaijjugagxyibarudpuubfunmkdisuffnbwhsbiybgtsfungwkukdxktrffptbcaftkjwbidnsheszbzhuxrteunaxitktyidpzdkhpsncrfgtsrdnknghxzbyuhwhzxkxguawjrfizzrtiucjitsakgkgjzpwynceenfrxxzzcdnrmiungggecnckcygixfjdhkcjcxtybekiesbpgefjkjmgpkwametjpifjyusjjtubsthtjynmsbfhibzafcsbwygwcjmfakirtganmukegsmxhzkyfzywysxfznejdpfhzewczpnsxkkxupkpizuikksadfjjhpdmpshxxghagnjbzrbbshwbnyxwndcjrmdsxbtucjjzuwcyjwenwcwgbuuktgdigjyxwsskpzwjnryruimkjbkjiysfujxfcrctbxfzwcutiguadxgcendhedkepcrrdfkshrcgdarxhjipbiykrgawfsumnirybxedpbwapsymadbfhnfdzbbzucawawhnresfabzzwxknnnmgscxzmpswbzmejubcnnrmuxfxpzdadfwkcefrbmihmgtcwicjngbtdzryhbjnrkdguhencprucefsccxfehrjwxirucdmgpehecibuezbcsifdzwhkduzyxcjxxzftbaapjzjpjhphzpgaigtcheegeumpc");
        System.out.println(i);
        endTime = System.currentTimeMillis();
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");

        startTime = System.currentTimeMillis();
        i = tester.numPalindrome("abcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcbabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcb");
        System.out.println(i);
        endTime = System.currentTimeMillis();
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");

        startTime = System.currentTimeMillis();
        i = tester.numPalindrome("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        System.out.println(i);
        endTime = System.currentTimeMillis();
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");

    }

    public int numPalindrome(String input) {
        int numPalindromes = 0;
        s = input;
        dp = new boolean[5000][5001];

        for(int i = 0; i < input.length(); i++) {
            for(int k = i ; k <= input.length() - 1; k++) {
                if(isPalindrome(i, k)){
                    numPalindromes++;
                }

            }
        }
        return numPalindromes;
    }

    //algorithm used is the one explained by Mr. Phan in office hours
    public static boolean isPalindrome(int i, int j){

        int a = i;
        int b = j;
        
        //the basis of dynamic programming
        if(dp[i][j])
            return true;
        
        while (s.charAt(a) == s.charAt(b)){
            dp[a][b] = true;
            a++;
            b--;

            if (b - a <= 2) {
                break;
            }
        }

        return dp[i][j];

    }
}